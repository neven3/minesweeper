{"version":3,"sources":["types/index.ts","components/NumberDisplay/index.tsx","utils/index.ts","constants/index.ts","components/Button/index.tsx","components/App/index.tsx","index.tsx"],"names":["CellValue","CellState","Face","NumberDisplay","value","className","toString","padStart","cellsWithMines","generateCells","cells","row","push","col","none","state","open","i","placeBombs","calculateNumOfBombsAround","maxRows","maxCols","randomRow","generateRandomNum","randomCol","bomb","num","Math","floor","random","rowIndex","colIndex","bombsFromPreviousCol","bombsFromCurrentCol","finishedAllRows","length","finishedAllCols","bombsInPreviousCol","bombsInCurrentCol","bombsInNextCol","returnNumberOfBombsInArray","getFieldsInPrevCol","getFieldsInCurrentCol","bombsAroundCurrentField","getFieldsInNextCol","reduce","accNum","currCell","Number","revealZeroMinesArea","isPreviousNearBombs","cell","visible","flagged","isCurrentNearBombs","shouldRevealSurrounding","forEach","cornerCoordinates","upperIndex","lowerIndex","leftIndex","rightIndex","upperCell","lowerCell","leftCell","rightCell","checkIfNumber","items","checkIfCellsMatchValue","getCornerCoordinates","corRow","corCol","cb","accBool","Button","explosion","onClick","handleRightClick","onContextMenu","renderCellContent","one","two","three","four","five","six","seven","eight","role","aria-label","newCells","App","useState","setCells","smile","face","setFace","time","setTime","isGameActive","setIsGameActive","numOfFlags","setNumOfFlags","hasWon","setHasWon","useEffect","timer","setInterval","clearInterval","won","handleFaceClick","onMouseDown","onMouseUp","renderCells","slice","map","handleFieldClick","handleFieldRightClick","event","lost","safeOpenCellsExit","cellsWithMinesLeft","currentCell","e","preventDefault","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26789eb7.chunk.js","sourcesContent":["export enum CellValue {\r\n    none,\r\n    one,\r\n    two,\r\n    three,\r\n    four,\r\n    five,\r\n    six,\r\n    seven,\r\n    eight,\r\n    bomb\r\n}\r\n\r\nexport enum CellState {\r\n    open,\r\n    flagged,\r\n    visible\r\n}\r\n\r\nexport enum Face {\r\n    smile = '🙂',\r\n    onClick = '😨',\r\n    lost = '💀',\r\n    won = '🥳'\r\n}\r\n\r\nexport interface Cell {\r\n    value: CellValue;\r\n    state: CellState;\r\n    explosion?: boolean;\r\n}\r\n\r\nexport type CalculateBombs = (\r\n    cells: Cell[][],\r\n    rowIndex: number,\r\n    colIndex: number,\r\n    bombsAroundPreviousCol?: number,\r\n    bombsAroundCurrentCol?: number,\r\n) => void;\r\n","import React from 'react';\r\nimport './NumberDisplay.scss';\r\n\r\ninterface NumberDisplayProps {\r\n    value: number;\r\n}\r\n\r\nconst NumberDisplay: React.FC<NumberDisplayProps> = ({ value }) => {\r\n    return (\r\n        <div className=\"NumberDisplay\">{value.toString().padStart(3, \"0\")}</div>\r\n    );\r\n};\r\n\r\nexport default NumberDisplay;","import { MAX_ROWS, MAX_COLS, NO_OF_BOMBS } from '../constants';\r\nimport { CellValue, CellState, Cell, CalculateBombs } from '../types';\r\n\r\nexport let cellsWithMines: (Cell[]) = [];\r\n\r\nexport const generateCells = () => {\r\n    const cells: Cell[][] = [];\r\n    cellsWithMines = [];\r\n\r\n    // generating all cells\r\n    for (let row = 0; row < MAX_ROWS; row++) {\r\n        cells.push([]);\r\n        for (let col = 0; col < MAX_COLS; col++) {\r\n            cells[row].push({\r\n                value: CellValue.none,\r\n                state: CellState.open\r\n            });\r\n        }\r\n    }\r\n\r\n    //randomly place 10 bombs\r\n    for (let i = 0; i < NO_OF_BOMBS; i++) {\r\n        placeBombs(cells, MAX_ROWS, MAX_COLS);\r\n    }\r\n\r\n    calculateNumOfBombsAround(cells, 0, 0);\r\n\r\n    return cells;\r\n};\r\n\r\nfunction placeBombs(cells: Cell[][], maxRows: number, maxCols: number): void {\r\n    // generate a random row\r\n    const randomRow = generateRandomNum(maxRows);\r\n    // generate a random column\r\n    const randomCol = generateRandomNum(maxCols);\r\n\r\n    const cellHasBomb = cells[randomRow][randomCol].value === CellValue.bomb;\r\n\r\n    if (!cellHasBomb) {\r\n        cells[randomRow][randomCol].value = CellValue.bomb;\r\n        cellsWithMines.push(cells[randomRow][randomCol]);\r\n    } else {\r\n        placeBombs(cells, maxRows, maxCols);\r\n    }\r\n}\r\n\r\nfunction generateRandomNum(num: number): number {\r\n    const random = Math.floor(Math.random() * num);\r\n\r\n    return random;\r\n}\r\n\r\nconst calculateNumOfBombsAround: CalculateBombs = (cells, rowIndex, colIndex, bombsFromPreviousCol, bombsFromCurrentCol) => {\r\n    const finishedAllRows = rowIndex === cells.length;\r\n    const finishedAllCols = colIndex === cells[rowIndex]?.length;\r\n\r\n    if (finishedAllRows) {\r\n        return;\r\n    } else if (finishedAllCols) {\r\n        return calculateNumOfBombsAround(cells, rowIndex + 1, 0);\r\n    }\r\n\r\n    const currentField = cells[rowIndex][colIndex];\r\n    const isCurrentBomb = currentField.value === CellValue.bomb;\r\n\r\n    if (isCurrentBomb) {\r\n        calculateNumOfBombsAround(cells, rowIndex, colIndex + 1);\r\n    } else {\r\n        let bombsInPreviousCol: number;\r\n        let bombsInCurrentCol: number;\r\n        let bombsInNextCol: number;\r\n\r\n        if (bombsFromPreviousCol == null || bombsFromCurrentCol == null) {\r\n            bombsInPreviousCol = returnNumberOfBombsInArray(getFieldsInPrevCol(cells, rowIndex, colIndex));\r\n            bombsInCurrentCol = returnNumberOfBombsInArray(getFieldsInCurrentCol(cells, rowIndex, colIndex));\r\n        } else {\r\n            bombsInPreviousCol = bombsFromPreviousCol;\r\n            bombsInCurrentCol = bombsFromCurrentCol;\r\n        }\r\n\r\n        if (colIndex !== cells[rowIndex].length - 1) {\r\n            bombsInNextCol = returnNumberOfBombsInArray(getFieldsInNextCol(cells, rowIndex, colIndex));\r\n        } else {\r\n            bombsInNextCol = 0;\r\n        }\r\n\r\n        const bombsAroundCurrentField = bombsInPreviousCol + bombsInCurrentCol + bombsInNextCol;\r\n        cells[rowIndex][colIndex].value = bombsAroundCurrentField;\r\n\r\n        calculateNumOfBombsAround(cells, rowIndex, colIndex + 1, bombsInCurrentCol, bombsInNextCol);\r\n    }\r\n}\r\n\r\nfunction returnNumberOfBombsInArray(cells: ((Cell | undefined)[])): number {\r\n    return cells.reduce((accNum: number, currCell): number => {\r\n        return accNum + Number(currCell ? (currCell.value === CellValue.bomb) : 0);\r\n    }, 0);\r\n}\r\n\r\nfunction getFieldsInPrevCol(cells: Cell[][], rowIndex: number, colIndex: number): Cell[] {\r\n    return ([\r\n        cells?.[rowIndex - 1]?.[colIndex - 1],\r\n        cells?.[rowIndex]?.[colIndex - 1],\r\n        cells?.[rowIndex + 1]?.[colIndex - 1]\r\n    ]);\r\n}\r\n\r\nfunction getFieldsInCurrentCol(cells: Cell[][], rowIndex: number, colIndex: number): Cell[] {\r\n    return ([\r\n        cells?.[rowIndex - 1]?.[colIndex],\r\n        cells?.[rowIndex + 1]?.[colIndex]\r\n    ]);\r\n}\r\n\r\nfunction getFieldsInNextCol(cells: Cell[][], rowIndex: number, colIndex: number): Cell[] {\r\n    return ([\r\n        cells?.[rowIndex - 1]?.[colIndex + 1],\r\n        cells?.[rowIndex]?.[colIndex + 1],\r\n        cells?.[rowIndex + 1]?.[colIndex + 1]\r\n    ]);\r\n}\r\n\r\nexport function revealZeroMinesArea(\r\n    cells: Cell[][],\r\n    rowIndex: number,\r\n    colIndex: number,\r\n    isPreviousNearBombs: boolean,\r\n): void {\r\n    const cell = cells?.[rowIndex]?.[colIndex];\r\n\r\n    if (!cell) {\r\n        return;\r\n    }\r\n\r\n    const { value, state } = cell;\r\n\r\n    if (state === CellState.visible || state === CellState.flagged) {\r\n        return;\r\n    }\r\n\r\n    let isCurrentNearBombs = false;\r\n    let shouldRevealSurrounding = false;\r\n\r\n    if (isPreviousNearBombs) {\r\n        if (value !== CellValue.none) {\r\n            return;\r\n        } else {\r\n            shouldRevealSurrounding = true;\r\n        }\r\n    }\r\n\r\n    if (value !== CellValue.none) {\r\n        isCurrentNearBombs = true;\r\n    }\r\n\r\n    cell.state = CellState.visible;\r\n    // call function with the field above the current field\r\n    revealZeroMinesArea(cells, rowIndex - 1, colIndex, isCurrentNearBombs);\r\n    // then call the function with the field just right to the current field\r\n    revealZeroMinesArea(cells, rowIndex, colIndex + 1, isCurrentNearBombs);\r\n    // then call the function with the field to the left of the current field\r\n    revealZeroMinesArea(cells, rowIndex, colIndex - 1, isCurrentNearBombs);\r\n    // then call the function with the field just below the current field\r\n    revealZeroMinesArea(cells, rowIndex + 1, colIndex, isCurrentNearBombs);\r\n\r\n    if (shouldRevealSurrounding) {\r\n        [\r\n            ...getFieldsInPrevCol(cells, rowIndex, colIndex),\r\n            ...getFieldsInCurrentCol(cells, rowIndex, colIndex),\r\n            ...getFieldsInNextCol(cells, rowIndex, colIndex)\r\n        ].forEach((cell) => {\r\n            if (cell) {\r\n                cell.state = CellState.visible;\r\n            }\r\n        });\r\n    }\r\n\r\n    if (value === CellValue.none) {\r\n        const cornerCoordinates = getCornerCoordinates(cells, rowIndex, colIndex);\r\n\r\n        if (cornerCoordinates) {\r\n            cornerCoordinates.forEach(([corRow, corCol]) => cells[corRow][corCol].state = CellState.visible);\r\n        }\r\n    }\r\n}\r\n\r\nfunction getCornerCoordinates(cells: Cell[][], rowIndex: number, colIndex: number): ([number, number][] | null) {\r\n    const upperIndex = rowIndex - 1;\r\n    const lowerIndex = rowIndex + 1;\r\n    const leftIndex = colIndex - 1;\r\n    const rightIndex = colIndex + 1;\r\n\r\n    const upperCell = cells?.[upperIndex]?.[colIndex];\r\n    const lowerCell = cells?.[lowerIndex]?.[colIndex];\r\n    const leftCell = cells?.[rowIndex]?.[leftIndex];\r\n    const rightCell = cells?.[rowIndex]?.[rightIndex];\r\n\r\n    const checkIfNumber = (cell: Cell): boolean => (\r\n        cell?.state !== CellState.open\r\n        && cell?.value !== CellValue.none\r\n        && cell?.value !== CellValue.bomb\r\n    );\r\n\r\n    const items: [number, number][] = [];\r\n\r\n    if (upperCell && rightCell && checkIfCellsMatchValue([upperCell, rightCell], checkIfNumber)) {\r\n        items.push([upperIndex, rightIndex]);\r\n    }\r\n\r\n    if (upperCell && leftCell && checkIfCellsMatchValue([upperCell, leftCell], checkIfNumber)) {\r\n        items.push([upperIndex, leftIndex]);\r\n    }\r\n\r\n    if (lowerCell && rightCell && checkIfCellsMatchValue([lowerCell, rightCell], checkIfNumber)) {\r\n        items.push([lowerIndex, rightIndex]);\r\n    }\r\n\r\n    if (lowerCell && leftCell && checkIfCellsMatchValue([lowerCell, leftCell], checkIfNumber)) {\r\n        items.push([lowerIndex, leftIndex]);\r\n    }\r\n\r\n    return items.length ? items : null;\r\n}\r\n\r\nfunction checkIfCellsMatchValue(cells: [Cell, Cell], cb: Function) {\r\n    return cells.reduce((accBool, currCell) => {\r\n        return accBool && cb(currCell);\r\n    }, true);\r\n}","export const MAX_ROWS = 9;\r\nexport const MAX_COLS = 9;\r\nexport const NO_OF_BOMBS = 10;","import React, { MouseEvent } from 'react';\r\nimport { CellState, CellValue } from '../../types';\r\nimport './Button.scss';\r\n\r\ninterface ButtonProps {\r\n    state: CellState;\r\n    value: CellValue;\r\n    explosion?: boolean;\r\n    onClick(event?: MouseEvent): void;\r\n    handleRightClick(event?: MouseEvent): void;\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({ state, value, explosion, onClick, handleRightClick }) => {\r\n    return (\r\n        <div\r\n            className={`Button${state === CellState.visible ? \" visible\" : \"\"}${explosion ? \" activated-mine\" : \"\"} value-${value}`}\r\n            onClick={onClick}\r\n            onContextMenu={handleRightClick}\r\n        >\r\n            {renderCellContent(state, value)}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n\r\nfunction renderCellContent(state: number, value: number): React.ReactNode {\r\n    if (state === CellState.visible) {\r\n        switch (value) {\r\n            case CellValue.one:\r\n                return (<span>1</span>);\r\n            case CellValue.two:\r\n                return (<span>2</span>);\r\n            case CellValue.three:\r\n                return (<span>3</span>);\r\n            case CellValue.four:\r\n                return (<span>4</span>);\r\n            case CellValue.five:\r\n                return (<span>5</span>);\r\n            case CellValue.six:\r\n                return (<span>6</span>);\r\n            case CellValue.seven:\r\n                return (<span>7</span>);\r\n            case CellValue.eight:\r\n                return (<span>8</span>);\r\n            case CellValue.bomb:\r\n                return (<span role=\"img\" aria-label=\"bomb\">💣</span>);\r\n            default:\r\n                return (<span></span>);\r\n        }\r\n    } else if (state === CellState.flagged) {\r\n        return (<span role=\"img\" aria-label=\"flag\">🏴‍☠️</span>);\r\n    }\r\n}","import React, { useState, Dispatch, MouseEvent, useEffect } from 'react';\r\nimport './App.scss';\r\nimport NumberDisplay from '../NumberDisplay';\r\nimport { generateCells, revealZeroMinesArea, cellsWithMines } from '../../utils';\r\nimport Button from '../Button';\r\nimport { Cell, CellState, CellValue, Face } from '../../types';\r\nimport { MAX_COLS, MAX_ROWS, NO_OF_BOMBS } from '../../constants';\r\n\r\nconst newCells = generateCells();\r\n\r\nconst App: React.FC = () => {\r\n    const [cells, setCells] = useState<Cell[][]>(newCells);\r\n    const [face, setFace] = useState<Face>(Face.smile);\r\n    const [time, setTime] = useState<number>(0);\r\n    const [isGameActive, setIsGameActive] = useState<boolean>(false);\r\n    const [numOfFlags, setNumOfFlags] = useState<number>(NO_OF_BOMBS);\r\n    const [hasWon, setHasWon] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        if (isGameActive && time < 999) {\r\n            const timer = setInterval(() => {\r\n                setTime(time + 1);\r\n            }, 1000);\r\n\r\n            return (() => clearInterval(timer));\r\n        }\r\n    }, [isGameActive, time]);\r\n\r\n    useEffect(() => {\r\n        if (hasWon) {\r\n            setIsGameActive(false);\r\n            setFace(Face.won);\r\n        }\r\n    }, [hasWon]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"Header\">\r\n                <NumberDisplay value={numOfFlags} />\r\n                <div\r\n                    className=\"Face\"\r\n                    onClick={() => handleFaceClick(setFace, setTime, setIsGameActive, setCells, setNumOfFlags, setHasWon)}\r\n                >\r\n                    {face}\r\n                </div>\r\n                <NumberDisplay value={time} />\r\n            </div>\r\n            <div\r\n                className=\"Body\"\r\n                onMouseDown={() => face === Face.smile && setFace(Face.onClick)}\r\n                onMouseUp={() => face === Face.onClick && setFace(Face.smile)}\r\n            >\r\n                {renderCells(cells, setCells, isGameActive, setIsGameActive, numOfFlags, setNumOfFlags, face, setFace, setHasWon)}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n\r\nfunction renderCells(\r\n    cells: Cell[][],\r\n    setCells: Dispatch<Cell[][]>,\r\n    isGameActive: boolean,\r\n    setIsGameActive: Dispatch<boolean>,\r\n    numOfFlags: number,\r\n    setNumOfFlags: Dispatch<number>,\r\n    face: Face,\r\n    setFace: Dispatch<Face>,\r\n    setHasWon: Dispatch<boolean>\r\n): React.ReactNode {\r\n    const newCells = cells.slice();\r\n    return newCells.map((row, rowIndex) => {\r\n        return row.map((cell, colIndex) => {\r\n            return (\r\n                <Button\r\n                    key={`${rowIndex}-${colIndex}`}\r\n                    explosion={cell.explosion}\r\n                    onClick={handleFieldClick(rowIndex, colIndex, newCells, setCells, isGameActive, setIsGameActive, face, setFace, setHasWon, numOfFlags, setNumOfFlags)}\r\n                    handleRightClick={handleFieldRightClick(cell, newCells, setCells, numOfFlags, setNumOfFlags, face)}\r\n                    state={cell.state}\r\n                    value={cell.value}\r\n                />\r\n            );\r\n        });\r\n    });\r\n}\r\n\r\nfunction handleFieldClick(\r\n    rowIndex: number,\r\n    colIndex: number,\r\n    cells: Cell[][],\r\n    setCells: Dispatch<Cell[][]>,\r\n    isGameActive: boolean,\r\n    setIsGameActive: Dispatch<boolean>,\r\n    face: Face,\r\n    setFace: Dispatch<Face>,\r\n    setHasWon: Dispatch<boolean>,\r\n    numOfFlags: number,\r\n    setNumOfFlags: Dispatch<number>\r\n): (event?: MouseEvent) => void {\r\n    return function (event?: MouseEvent): void {\r\n        const cell = cells[rowIndex][colIndex];\r\n        const newCells = cells.slice();\r\n\r\n        if (!isGameActive && face === Face.smile) {\r\n            setIsGameActive(true);\r\n        }\r\n\r\n        if (face === Face.smile) {\r\n            if (cell.state === CellState.open) {\r\n                if (cell.value === CellValue.none) {\r\n                    revealZeroMinesArea(cells, rowIndex, colIndex, false);\r\n                } else {\r\n                    cell.state = CellState.visible;\r\n\r\n                    if (cell.value === CellValue.bomb) {\r\n                        cell.explosion = true;\r\n                        setIsGameActive(false);\r\n                        setFace(Face.lost);\r\n                        cellsWithMines.forEach(cell => cell.state = CellState.visible)\r\n                        setCells(newCells);\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                let safeOpenCellsExit = false;\r\n\r\n                const cellsWithMinesLeft: Cell[] = [];\r\n\r\n                for (let row = 0; row < MAX_ROWS; row++) {\r\n                    for (let col = 0; col < MAX_COLS; col++) {\r\n                        const currentCell = newCells[row][col];\r\n\r\n                        if (currentCell.state === CellState.open) {\r\n                            if (currentCell.value === CellValue.bomb) {\r\n                                cellsWithMinesLeft.push(currentCell);\r\n                            } else {\r\n                                safeOpenCellsExit = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!safeOpenCellsExit) {\r\n                    cellsWithMinesLeft.forEach(cell => {\r\n                        cell.state = CellState.flagged;\r\n                    });\r\n\r\n                    setNumOfFlags(numOfFlags - cellsWithMinesLeft.length);\r\n                    setHasWon(true);\r\n                }\r\n\r\n                setCells(newCells);\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nfunction handleFaceClick(\r\n    setFace: Dispatch<Face>,\r\n    setTime: Dispatch<number>,\r\n    setIsGameActive: Dispatch<boolean>,\r\n    setCells: Dispatch<Cell[][]>,\r\n    setNumOfFlags: Dispatch<number>,\r\n    setHasWon: Dispatch<boolean>\r\n): void {\r\n    setFace(Face.smile);\r\n    setHasWon(false);\r\n    setTime(0);\r\n    setIsGameActive(false);\r\n    setCells(generateCells());\r\n    setNumOfFlags(NO_OF_BOMBS);\r\n}\r\n\r\nfunction handleFieldRightClick(\r\n    cell: Cell,\r\n    cells: Cell[][],\r\n    setCells: Dispatch<Cell[][]>,\r\n    numOfFlags: number,\r\n    setNumOfFlags: Dispatch<number>,\r\n    face: Face\r\n): (e?: MouseEvent) => void {\r\n    return function (e?: MouseEvent): void {\r\n        e?.preventDefault();\r\n        const newCells = cells.slice();\r\n\r\n        if (numOfFlags > 0 && face === Face.smile) {\r\n            if (cell.state === CellState.open) {\r\n                cell.state = CellState.flagged;\r\n                setNumOfFlags(numOfFlags - 1);\r\n                setCells(newCells);\r\n            } else if (cell.state === CellState.flagged) {\r\n                cell.state = CellState.open;\r\n                setNumOfFlags(numOfFlags + 1);\r\n                setCells(newCells);\r\n            }\r\n        }\r\n    };\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}